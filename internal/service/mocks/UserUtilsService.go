// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UserUtilsService is an autogenerated mock type for the UserUtilsService type
type UserUtilsService struct {
	mock.Mock
}

// CompareHashAndPassword provides a mock function with given fields: password, hash
func (_m *UserUtilsService) CompareHashAndPassword(password string, hash string) error {
	ret := _m.Called(password, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: secretKey, id
func (_m *UserUtilsService) CreateToken(secretKey string, id int) (string, error) {
	ret := _m.Called(secretKey, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(secretKey, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(secretKey, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJwtTokenByAuthHeader provides a mock function with given fields: authHeader
func (_m *UserUtilsService) GetJwtTokenByAuthHeader(authHeader string) (string, error) {
	ret := _m.Called(authHeader)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(authHeader)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashAndSalt provides a mock function with given fields: pwd, pepper
func (_m *UserUtilsService) HashAndSalt(pwd string, pepper string) (string, error) {
	ret := _m.Called(pwd, pepper)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(pwd, pepper)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pwd, pepper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: accessToken, secretKey
func (_m *UserUtilsService) ParseToken(accessToken string, secretKey string) (int, error) {
	ret := _m.Called(accessToken, secretKey)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(accessToken, secretKey)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, secretKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
