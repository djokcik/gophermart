// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/djokcik/gophermart/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WithdrawService is an autogenerated mock type for the WithdrawService type
type WithdrawService struct {
	mock.Mock
}

// AmountWithdrawByUser provides a mock function with given fields: ctx, userID
func (_m *WithdrawService) AmountWithdrawByUser(ctx context.Context, userID int) (model.Amount, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.Amount
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Amount); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.Amount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessWithdraw provides a mock function with given fields: ctx, orderID, sum
func (_m *WithdrawService) ProcessWithdraw(ctx context.Context, orderID model.OrderID, sum model.Amount) error {
	ret := _m.Called(ctx, orderID, sum)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID, model.Amount) error); ok {
		r0 = rf(ctx, orderID, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawLogsByUserID provides a mock function with given fields: ctx, userID
func (_m *WithdrawService) WithdrawLogsByUserID(ctx context.Context, userID int) ([]model.Withdraw, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Withdraw); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
