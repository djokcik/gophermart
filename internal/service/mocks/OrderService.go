// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/djokcik/gophermart/internal/model"
	mock "github.com/stretchr/testify/mock"

	provider "github.com/djokcik/gophermart/provider"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// OrdersByStatus provides a mock function with given fields: ctx, status
func (_m *OrderService) OrdersByStatus(ctx context.Context, status model.Status) ([]model.Order, error) {
	ret := _m.Called(ctx, status)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, model.Status) []model.Order); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersByUser provides a mock function with given fields: ctx, userID
func (_m *OrderService) OrdersByUser(ctx context.Context, userID int) ([]model.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessOrder provides a mock function with given fields: ctx, orderID
func (_m *OrderService) ProcessOrder(ctx context.Context, orderID model.OrderID) error {
	ret := _m.Called(ctx, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateForAccrual provides a mock function with given fields: ctx, order, accrual
func (_m *OrderService) UpdateForAccrual(ctx context.Context, order model.Order, accrual provider.AccrualResponse) error {
	ret := _m.Called(ctx, order, accrual)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order, provider.AccrualResponse) error); ok {
		r0 = rf(ctx, order, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
